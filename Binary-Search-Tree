//BINARY SEARCH TREE CREATION AND TRAVERSAL

#include<stdio.h>
#include<stdlib.h>

struct node {
    int data;
    struct node* left;
    struct node* right;
};

struct node* create(int data) {
    struct node* new = (struct node*)malloc(sizeof(struct node));
    new->data = data;
    new->left = NULL;
    new->right = NULL;
    return new;
}

struct node* insert(struct node* root, int data) {
    if (root == NULL) {
        return create(data);
    }
    if (data < root->data) {
        root->left = insert(root->left, data);
    } else if (data > root->data) {
        root->right = insert(root->right, data);
    }
    return root;
}

void inorder(struct node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d\t", root->data);
        inorder(root->right);
    }
}

void preorder(struct node* root) {
    if (root != NULL) {
        printf("%d\t", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

void postorder(struct node* root) {
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        printf("%d\t", root->data);
    }
}

int main() {
    struct node* root = NULL;
    int ch, v;
    
    while (1) {
        printf("1. Inorder\n2. Preorder\n3. Postorder\n4. Insert\n5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &ch);
        
        switch (ch) {
            case 1:
                printf("Inorder traversal:\n");
                inorder(root);
                printf("\n");
                break;
            case 2:
                printf("Preorder traversal:\n");
                preorder(root);
                printf("\n");
                break;
            case 3:
                printf("Postorder traversal:\n");
                postorder(root);
                printf("\n");
                break;
            case 4:
                printf("Enter the value to insert: ");
                scanf("%d", &v);
                root = insert(root, v);
                break;
            case 5:
                exit(0);
                break;
            default:
                printf("Invalid choice\n");
        }
    }
    return 0;
}
