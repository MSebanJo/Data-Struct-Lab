//POLYNOMIAL ADDITION USING LINKED LIST
#include<stdio.h>
#include<stdlib.h>

struct node {
    int coeff, exp;
    struct node* link;
} *Pheader, *Qheader, *Rheader;

void readpoly(struct node *ptr, int n) {
    int i;
    struct node *new;

    for(i = 0; i < n; i++) {
        new = (struct node*)malloc(sizeof(struct node));
        printf("\nEnter the coefficient: ");
        scanf("%d", &new->coeff);
        printf("\nEnter the exponent: ");
        scanf("%d", &new->exp);
        new->link = NULL;

        if(ptr->link == NULL) {
            ptr->link = new;
        } else {
            new->link = ptr->link;
            ptr->link = new;
        }
    }
}

void disp(struct node *ptr1) {
    struct node *ptr = ptr1->link;
    while(ptr->link != NULL) {
        printf("%dx^%d + ", ptr->coeff, ptr->exp);
        ptr = ptr->link;
    }
    printf("%dx^%d", ptr->coeff, ptr->exp);
}

void addpoly(struct node *p, struct node *q) {
    struct node *Pptr = p->link, *Qptr = q->link, *Rptr = Rheader, *new;

    while(Pptr != NULL && Qptr != NULL) {
        new = (struct node*)malloc(sizeof(struct node));
        new->link = NULL;

        if(Pptr->exp == Qptr->exp) {
            new->coeff = Pptr->coeff + Qptr->coeff;
            new->exp = Pptr->exp;
            Pptr = Pptr->link;
            Qptr = Qptr->link;
        } else if(Pptr->exp > Qptr->exp) {
            new->coeff = Pptr->coeff;
            new->exp = Pptr->exp;
            Pptr = Pptr->link;
        } else {
            new->coeff = Qptr->coeff;
            new->exp = Qptr->exp;
            Qptr = Qptr->link;
        }
        Rptr->link = new;
        Rptr = new;
    }

    while(Pptr != NULL) {
        new = (struct node*)malloc(sizeof(struct node));
        new->coeff = Pptr->coeff;
        new->exp = Pptr->exp;
        new->link = NULL;
        Rptr->link = new;
        Rptr = new;
        Pptr = Pptr->link;
    }

    while(Qptr != NULL) {
        new = (struct node*)malloc(sizeof(struct node));
        new->coeff = Qptr->coeff;
        new->exp = Qptr->exp;
        new->link = NULL;
        Rptr->link = new;
        Rptr = new;
        Qptr = Qptr->link;
    }
}

int main() {
    int n, m;
    Pheader = (struct node*)malloc(sizeof(struct node));
    Qheader = (struct node*)malloc(sizeof(struct node));
    Rheader = (struct node*)malloc(sizeof(struct node));
    Pheader->link = Qheader->link = Rheader->link = NULL;

    printf("\nEnter the number of elements of the first polynomial: ");
    scanf("%d", &n);
    readpoly(Pheader, n);

    printf("\nEnter the number of elements of the second polynomial: ");
    scanf("%d", &m);
    readpoly(Qheader, m);

    printf("\nFirst polynomial:\t");
    disp(Pheader);
    printf("\nSecond polynomial:\t");
    disp(Qheader);

    addpoly(Pheader, Qheader);
    printf("\nSum of polynomials:\t");
    disp(Rheader);

    return 0;
}


OUTPUT:

Enter the number of elements of the fist polynimial: 
5

Enter the coefficient: 10
Enter the exponent: 1

Enter the coefficient: -3
Enter the exponent: 3

Enter the coefficient: 4
Enter the exponent: 5

Enter the coefficient: -10
Enter the exponent: 6

Enter the coefficient: 2
Enter the exponent: 7

Enter the number of elements of the fist polynimial: 
4

Enter the coefficient: -4
Enter the exponent: 1

Enter the coefficient: -5
Enter the exponent: 3

Enter the coefficient: -2
Enter the exponent: 6

Enter the coefficient: 4
Enter the exponent: 8

Fist polynimial:     2x^7 + -10x^6 + 4x^5 + -3x^3 + 10x^1 
Second polynimial:   4x^8 + -2x^6 + -5x^3 + -4x^1 
Sum of  polynimial:  4x^8 + 2x^7 + -12x^6 + 4x^5 + -8x^3 + 6x^1
